################################################################################
# Build Configuration
################################################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

################################################################################
# Project Configuration
################################################################################

[project]
name = "taxpasta"
description = "TAXonomic Profile Aggregation and STAndardisation"
authors = [
    { name = "Moritz E. Beber", email = "moritz.beber@posteo.de"},
    { name = "Maxime Borry", email = "maxime_borry@eva.mpg.de"},
    { name = "James A. Fellows Yates", email = "jfy133@gmail.com"},
    { name = "Sofia Stamouli", email = "sofia.stamouli@scilifelab.se"},
]
license = "Apache-2.0"
readme = {"file" = "README.md", "content-type" = "text/markdown"}
requires-python = ">=3.9"
# Please consult https://pypi.org/classifiers/ for a full list.
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Typing :: Typed",
]
keywords = [
    "bioinformatics",
    "metagenomics",
    "profiling",
    "classification",
    "taxonomy",
    "metagenomic profile",
    "taxonomic profile",
    "standardisation",
    "merging",
]
dynamic = ["version"]
dependencies = [
    "depinfo ~=2.2",
    "numpy ~=1.26",
    "pandas ~=2.1",
    "pandera ~=0.19",
    "taxopy ~=0.13",
    "typer ~=0.12",
]

[project.urls]
Homepage = "https://github.com/taxprofiler/taxpasta"
Documentation = "https://taxpasta.readthedocs.io"
"Source Code" = "https://github.com/taxprofiler/taxpasta"
"Bug Tracker" = "https://github.com/taxprofiler/taxpasta/issues"
Download = "https://pypi.org/project/taxpasta/#files"

[project.scripts]
taxpasta = "taxpasta.infrastructure.cli:app"

[project.optional-dependencies]
all = [
    "biom-format >=2.1.16,<3",
    "odfpy",
    "openpyxl",
    "pyarrow",
    "rich",
]
arrow = ["pyarrow"]
biom = ["biom-format >=2.1.16,<3"]
ods = ["odfpy"]
parquet = ["pyarrow"]
rich = ["rich"]
xlsx = ["openpyxl"]
dev = [
    "hatch",
    "pre-commit",
]

################################################################################
# Tool Configuration
################################################################################

[tool.hatch.build]
only-packages = true

[tool.hatch.build.targets.wheel]
packages = ["src/taxpasta"]

[tool.hatch.build.hooks.vcs]
version-file = "src/taxpasta/_version.py"

[tool.hatch.version]
source = "vcs"

[tool.bandit.assert_used]
skips = ["*/test_*.py"]

[tool.black]
line-length = 88
python-version = ["py39"]
extend-exclude = '''
(
    _version.py
)
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = ["raises"]

[tool.coverage.paths]
source = [
    "src/taxpasta",
    "*/site-packages/taxpasta",
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover"]
precision = 2

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D107",  # 'Missing docstring in __init__' ignored because pydoclint wants us to document the class instead.
    "D203",  # '1 blank line required before class docstring' ignored because we want no blank line.
    "D212",  # 'Multi-line docstring summary should start at the first line' ignored because we want the summary to start on the second line.
    "D407",  # 'Missing dashed underline after section' ignored because Google style docstrings don't underline.
    "ANN002",  # 'Missing type annotation for {*args} in method'.
    "ANN003",  # 'Missing type annotation for {*kwargs} in method'.
    "ANN101",  # 'Missing type annotation for {self} in method'.
    "ANN102",  # 'Missing type annotation for {cls} in classmethod'.
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "E401",  # 'Multiple imports on one line'
    "E402",  # 'Module level import not at top of file'
    "F401",  # 'Imported but unused'
    "I001",  # 'Import block is un-sorted or un-formatted' ignored because we may have to import in a particular, not-alphabetical order.
]
"tests/**/*.py" = [
    "S101",  # 'Use of assert detected' ignored because we are using pytest.
    "INP001",  # 'Insecure input' ignored because we are testing.
    "ANN201",  # 'Missing type annotation for {return}' ignored because all tests return `None`.
]

[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["src", "taxpasta"]
lines-after-imports = 2

[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false

[tool.mypy]
plugins = [
    "pydantic.mypy",
]

# Stop mypy from complaining about missing types from imports.
[[tool.mypy.overrides]]
module = [
    "biom.*",
    "numpy.*",
    "odf.*",
    "openpyxl.*",
    "pandas.*",
    "pandera.*",
    "pyarrow.*",
    "rich.*",
    "taxopy.*",
    "typer.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

################################################################################
# Hatch Environments
################################################################################

[tool.hatch.envs.style]
description = """Check the style of the codebase."""
dependencies = [
    "pydoclint",
    "ruff",
]
detached = true

[tool.hatch.envs.style.scripts]
docstrings = "pydoclint"
code = "ruff check"
check = ["docstrings", "code"]

[tool.hatch.envs.safety]
description = """Check dependencies for security vulnerabilities."""
extra-dependencies = [
    "safety",
]

[tool.hatch.envs.safety.scripts]
check = "safety check --full-report -i 70612"

[tool.hatch.envs.types]
description = """Check the static types of the codebase."""
dependencies = [
    "mypy",
]

[tool.hatch.envs.types.scripts]
check = "mypy src/taxpasta"

[tool.hatch.envs.docs]
description = """Build or serve the documentation."""
extra-dependencies = [
    "bash-kernel ~=0.9",
    "jupyter ~=1.0",
    "mkdocs-awesome-pages-plugin ~=2.9",
    "mkdocs-material ~=9.5",
    "mkdocs-exclude ~=1.0",
    "mkdocstrings[python] ~=0.24",
    "tabulate ~=0.9",
]
features = ["all"]

[tool.hatch.envs.docs.scripts]
update = "make docs"
build = "mkdocs build {args:--clean --strict}"
serve = "mkdocs serve {args}"

[tool.hatch.envs.install]
description = """Test the source and wheel distribution of the package."""
dependencies = [
    "pip",
    "twine",
]
detached = true

[tool.hatch.envs.install.scripts]
check = [
    "pip check",
    "hatch build {args:--clean}",
    "twine check dist/*",
]

[tool.hatch.envs.test]
description = """Run the test suite."""
extra-dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-raises",
    "pytest-randomly",
    "pytest-xdist",
]
features = ["all"]

[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
run = "pytest --cov=taxpasta --cov-report=term-missing {args}"
